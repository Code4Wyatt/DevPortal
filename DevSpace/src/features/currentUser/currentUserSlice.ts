import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { RootState } from "../../app/store";
import { useLoginUserMutation, authApi, login, fetchCurrentUser } from "./userAPI";

export interface CurrentUserState {
  user: [];
  status: "idle" | "loading" | "failed";
}

const initialState: CurrentUserState = {
  user: [],
  status: "idle",
};

export const loginDeveloper = createAsyncThunk(
  "user/loginUser",
  async (email: string, password) => {
    const response = await login(email, password.toString());
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchUser = createAsyncThunk(
  "user/fetchCurrentUser",
  async (email: string) => {
    const response = await fetchCurrentUser(email);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const currentUserSlice = createSlice({
  name: "currentUser",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    addUser: (state, action: PayloadAction<[]>) => {
      state.user = action.payload;
    },
    removeUser: (state) => {
      state.user = [];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginDeveloper.pending, (state) => {
        state.status = "loading";
      })
      .addCase(loginDeveloper.fulfilled, (state, action) => {
        state.status = "idle";
        state.user = action.payload;
      })
      .addCase(loginDeveloper.rejected, (state) => {
        state.status = "failed";
      });
    builder
      .addCase(fetchUser.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchUser.fulfilled, (state, action) => {
        state.status = "idle";
        state.user = action.payload;
      })
      .addCase(fetchUser.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { addUser, removeUser } = currentUserSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCurrentUser = (state: RootState) => state.authApi;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default currentUserSlice.reducer;
